# -*- coding: utf-8 -*-
# Generated by Django 1.11.24 on 2019-10-11 22:08
from __future__ import unicode_literals

from django.db import migrations, models
from django.db.backends.postgresql_psycopg2.schema import DatabaseSchemaEditor
from django.db.migrations.state import StateApps

from django.utils.timezone import now as timezone_now

from typing import Any, Dict
import ujson

# Constants and functions copied from as they were at the time of the migration
ROLE_REALM_ADMINISTRATOR = 200
ROLE_MEMBER = 400
ROLE_GUEST = 600

ROLE_COUNT = '10'
ROLE_COUNT_HUMANS = '11'
ROLE_COUNT_BOTS = '12'

BILLING_ROLE_COUNT_RECORDED = 601

def realm_user_count_by_role(apps: StateApps, realm: Any) -> Dict[str, Any]:
    UserProfile = apps.get_model('zerver', 'UserProfile')
    human_counts = {ROLE_REALM_ADMINISTRATOR: 0,
                    ROLE_MEMBER: 0,
                    ROLE_GUEST: 0}
    for value_dict in list(UserProfile.objects.filter(
            realm=realm, is_bot=False, is_active=True).values('role').annotate(models.Count('role'))):
        human_counts[value_dict['role']] = value_dict['role__count']
    bot_count = UserProfile.objects.filter(realm=realm, is_bot=True, is_active=True).count()
    return {
        ROLE_COUNT_HUMANS: human_counts,
        ROLE_COUNT_BOTS: bot_count,
    }
# end copied constants and functions

def record_role_count(apps: StateApps, schema_editor: DatabaseSchemaEditor) -> None:
    Realm = apps.get_model('zerver', 'Realm')
    RealmAuditLog = apps.get_model('zerver', 'RealmAuditLog')
    for realm in Realm.objects.all():
        RealmAuditLog.objects.create(
            realm=realm, event_type=BILLING_ROLE_COUNT_RECORDED,
            event_time=timezone_now(), extra_data=ujson.dumps({
                ROLE_COUNT: realm_user_count_by_role(apps, realm)
            }))

class Migration(migrations.Migration):

    dependencies = [
        ('zerver', '0250_saml_auth'),
    ]

    operations = [
        migrations.RunPython(record_role_count,
                             reverse_code=migrations.RunPython.noop),
    ]
